---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import type { BackgroundColor } from '@libs/types';
interface Props {
    name: string;
    position: string;
    pictureReference: ImageMetadata;
    pictureHoverReference?: ImageMetadata;
    bgColor: BackgroundColor;
}
const { name, position, pictureReference, pictureHoverReference = pictureReference, bgColor }: Props = Astro.props;
---

<logger-card>
    <div class="overflow-visible snap-start shrink-0 origin-center scale-100 transition-transform duration-500 flex flex-col">
        <a class:list={["overflow-visible group w-64 h-64 mb-10 rounded-3xl border-2 border-black flex place-content-end items-end", bgColor]} aria-label="Les loggers" href="/les-loggers">
            <Image class="md:group-hover:hidden self-end" data-name="base" src={pictureReference} alt="" />
            <Image class="hidden md:group-hover:block self-end z-50" data-name="hover" src={pictureHoverReference} alt="" />
        </a>
        <h2 class="font-bold text-2xl">{name}</h2>
        <p class="text-xl">{position}</p>
    </div>
</logger-card>

<script>
    class LoggerCard extends HTMLElement {
        imgBase: HTMLElement | null;
        imgHover: HTMLElement | null;
        nTimeoutId: NodeJS.Timeout | undefined;
        nIntervalId: NodeJS.Timer | undefined;

        constructor() {
            super();
            this.imgBase = null;
            this.imgHover = null;
            this.nTimeoutId = undefined;
            this.nIntervalId = undefined;
        }

        connectedCallback() {
            this.imgBase = this.querySelector('[data-name="base"]');
            this.imgHover = this.querySelector('[data-name="hover"]');

            this.setupListeners();
            this.animateLoggers();
        }

        disconnectedCallback() {
            this.clearIntervalAndTimeout();
        }

        setupListeners() {
            window.addEventListener("resize", this.onWindowResize);
        }

        animateLoggers() {
            if (window.matchMedia("(max-width: 767px)").matches) {
                if (this.nTimeoutId) {
                    clearTimeout(this.nTimeoutId);
                }
                this.imgHover?.classList.add("hidden");

                this.nIntervalId = setInterval(() => {
                    this.imgBase?.classList.toggle("hidden");
                    this.imgHover?.classList.toggle("hidden");
                }, 5000);
            } else {
                this.clearIntervalAndTimeout();
                this.imgBase?.classList.remove("hidden");
                this.imgHover?.classList.add("hidden");
            }
        }

        onWindowResize = () => {
            if (this.nTimeoutId) {
                clearTimeout(this.nTimeoutId);
            }
            this.clearIntervalAndTimeout();
            this.animateLoggers();
        };

        clearIntervalAndTimeout() {
            if (this.nIntervalId) {
                clearInterval(this.nIntervalId);
                this.nIntervalId = undefined;
            }
        }
    }

    customElements.define("logger-card", LoggerCard);
</script>