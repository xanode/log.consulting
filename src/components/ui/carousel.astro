---
import Icon from '@components/ui/icon.astro';

interface Props {
    type: string;
    visibleElementsPx: { [breakpoint: number]: number };
    offset?: number;
}

const { type, visibleElementsPx, offset = 1 } = Astro.props as Props;

// Generate the grid classes based on the visibleElementsPx map
const gridClasses = ['sm', 'md', 'lg', 'xl', '2xl'].map((breakpoint, index) => `${breakpoint}:grid-cols-${Object.values(visibleElementsPx)[index]}`).join(' ');
---

<carousel-component class="overflow-y-visible flex flex-row gap-6 justify-center items-center mx-auto py-8 shrink-0" data-type={type} data-visibleelementspx={JSON.stringify(visibleElementsPx)} data-offset={offset}>
    <button aria-label="Left">
        <Icon className="h-7" name="left-arrow" />
    </button>
    <div class:list={['overflow-y-visible snap-center snap-mandatory scroll-smooth grid grid-cols-1 gap-12 max-w-7xl', gridClasses]}>
        <slot />
    </div>
    <button aria-label="Right">
        <Icon className="h-7" name="right-arrow" />
    </button>
</carousel-component>

<script>
    class Carousel extends HTMLElement {
        cards: Element[] | null;
        currentIndex: number;
        touchStartX: number;
        touchStartY: number;
        visibleElementsPx: { [breakpoint: number]: number };

        constructor() {
            super();
            this.cards = [...this.querySelectorAll(`${this.dataset.type}`)];
            this.currentIndex = 0;
            this.touchStartX = 0;
            this.touchStartY = 0;
            this.visibleElementsPx = JSON.parse(this.dataset.visibleelementspx as string);
        }

        connectedCallback() {
            // Attach click handlers to the left and right arrows buttons if they exist
            const leftArrow = this.querySelector('[aria-label="Left"]');
            const rightArrow = this.querySelector('[aria-label="Right"]');

            if (leftArrow) leftArrow.addEventListener('click', () => this.updateCarousel(-parseInt(this.dataset.offset ? this.dataset.offset : '0', 10)));
            if (rightArrow) rightArrow.addEventListener('click', () => this.updateCarousel(parseInt(this.dataset.offset ? this.dataset.offset : '0', 10)));

            // Initialize the carousel
            this.updateCarousel(0);

            // Attach a resize handler to the window
            window.addEventListener('resize', () => this.updateCarousel(0));

            // Attach a swipe handler to the carousel
            this.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: true });
            this.addEventListener('touchend', (e) => this.handleTouchEnd(e), { passive: true });
        }

        handleTouchStart(e: TouchEvent): void {
            this.touchStartX = e.touches[0].clientX;
            this.touchStartY = e.touches[0].clientY;
        }

        handleTouchEnd(e: TouchEvent): void {
            // Calculate the difference in pixels between the starting and ending touch positions
            const deltaX = e.changedTouches[0].clientX - this.touchStartX;
            const deltaY = e.changedTouches[0].clientY - this.touchStartY;

            // Determine if the user swiped horizontally or vertically
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                // If the user swiped horizontally, update the carousel accordingly
                this.updateCarousel(deltaX > 0 ? -1 : 1);
            }
        }

        updateCarousel(direction: number): void {
            let maxVisibleWidth = 0;
            let visibleElementCount = 1;

            // Loop though each entry in the visibleElementsPs map;
            for (const [width, count] of Object.entries(this.visibleElementsPx)) {
                const widthNum = parseInt(width, 10);
                if (window.innerWidth >= widthNum && widthNum > maxVisibleWidth) {
                    // If the screen width is greater than or equal to the current map width
                    // and the map width is greater than the previous maximum, set the visible element count
                    maxVisibleWidth = widthNum;
                    visibleElementCount = count;
                }
            }

            // Update the current index based on the direction
            if (this.currentIndex + direction >= 0 && this.currentIndex + direction + visibleElementCount <= this.cards!.length) {
                this.currentIndex += direction;
            }

            // Get the subarray of cards to display in the carousel, limited by the current index and the visible element count
            const displayCards = this.cards?.slice(this.currentIndex, this.currentIndex + visibleElementCount);

            // Set the display style of the cards
            this.cards?.forEach((card, index) => {
                if (displayCards?.includes(card)) {
                    (card as HTMLElement).style.display = 'block';
                } else {
                    (card as HTMLElement).style.display = 'none';
                }
            });
        }
    }

    customElements.define('carousel-component', Carousel);
</script>